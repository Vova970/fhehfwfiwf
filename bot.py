import asyncio
import sqlite3
import configparser
from datetime import datetime, time
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import io

# –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞
config = configparser.ConfigParser()
config.read("settings.ini")

TOKEN = config.get("bot", "token")
CHANNEL_LINK = config.get("links", "channel_link")
CHANNEL_BACKUP = config.get("links", "channel_backup", fallback="")  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
BOT_LINK = config.get("links", "bot_link")
ADMIN_ID = int(config.get("admin", "admin_id"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY, 
            username TEXT, 
            date TEXT,
            language TEXT DEFAULT 'ru'
        )
    """)
    conn.commit()
    return conn, conn.cursor()

conn, cursor = init_db()

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "ru": {
        "welcome": "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! ‚ú®\n\nüíé –í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è!",
        "choose_language": "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "channel_button": "üíé –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª",
        "channel_backup_button": "üì° –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª",
        "bot_button": "ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç",
        "admin_button": "üîß –ê–¥–º–∏–Ω –º–µ–Ω—é",
        "back_button": "üîô –ù–∞–∑–∞–¥",
        "admin_menu": "üîß –ê–¥–º–∏–Ω –º–µ–Ω—é",
        "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "links": "üîó –°—Å—ã–ª–∫–∏",
        "broadcast": "üì• –†–∞—Å—Å—ã–ª–∫–∞",
        "user_count": "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}",
        "links_menu": "üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Å—ã–ª–æ–∫:",
        "edit_channel": "üíé –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª",
        "edit_channel_backup": "üì° –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª",
        "edit_bot": "ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç",
        "send_channel_link": "üíé –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.",
        "send_channel_backup_link": "üì° –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª.",
        "send_bot_link": "ü§ñ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞.",
        "channel_link_updated": "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!",
        "channel_backup_link_updated": "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!",
        "bot_link_updated": "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!",
        "main_menu": "‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ú®",
        "daily_stats": "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}",
        "invalid_link": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/...",
        "broadcast_menu": "üì• –†–∞—Å—Å—ã–ª–∫–∞\n\n–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {}",
        "broadcast_recipients": "üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {}\n–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {}",
        "broadcast_start": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
        "broadcast_select_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:",
        "broadcast_in_progress": "‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...",
        "broadcast_complete": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π.",
        "broadcast_no_text": "‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        "db_sent": "üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
        "no_access": "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ"
    },
    "en": {
        "welcome": "‚ú® Welcome to the bot! ‚ú®\n\nüíé Choose a button below and enjoy!",
        "choose_language": "üåç Please choose your language:",
        "channel_button": "üíé Main channel",
        "channel_backup_button": "üì° Backup channel",
        "bot_button": "ü§ñ Main bot",
        "admin_button": "üîß Admin menu",
        "back_button": "üîô Back",
        "admin_menu": "üîß Admin menu",
        "stats": "üìä Statistics",
        "links": "üîó Links",
        "broadcast": "üì• Broadcast",
        "user_count": "üìä User count: {}",
        "links_menu": "üîó Links settings:",
        "edit_channel": "üíé Main channel",
        "edit_channel_backup": "üì° Backup channel",
        "edit_bot": "ü§ñ Main bot",
        "send_channel_link": "üíé Send new main channel link.",
        "send_channel_backup_link": "üì° Send new backup channel link.",
        "send_bot_link": "ü§ñ Send new bot link.",
        "channel_link_updated": "‚úÖ Main channel link updated successfully!",
        "channel_backup_link_updated": "‚úÖ Backup channel link updated successfully!",
        "bot_link_updated": "‚úÖ Bot link updated successfully!",
        "main_menu": "‚ú® Main menu ‚ú®",
        "daily_stats": "üìä Daily statistics:\n\nüë• Users: {}",
        "invalid_link": "‚ùå Invalid link. Please send a link in format https://t.me/...",
        "broadcast_menu": "üì• Broadcast\n\nMessage text: {}",
        "broadcast_recipients": "üë• Recipients: {}\nSelected language: {}",
        "broadcast_start": "üöÄ Start broadcast",
        "broadcast_select_lang": "Select recipients language:",
        "broadcast_in_progress": "‚è≥ Broadcast started...",
        "broadcast_complete": "‚úÖ Broadcast complete! Sent {} messages.",
        "broadcast_no_text": "‚ùå Broadcast text is empty. Please write a message for broadcast.",
        "db_sent": "üì¶ Database sent",
        "no_access": "‚õî You don't have access to this command"
    }
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def get_text(lang, key, *args):
    return TEXTS[lang][key].format(*args)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (–∏–Ω–ª–∞–π–Ω)
def get_language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_language_ru"),
            InlineKeyboardButton(text="üá¨üáß English", callback_data="set_language_en")
        ]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–ª–∞–π–Ω)
def get_user_keyboard(user_id, lang="ru"):
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    channel_buttons = [
        InlineKeyboardButton(text=get_text(lang, "channel_button"), url=CHANNEL_LINK)
    ]
    if CHANNEL_BACKUP:  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å
        channel_buttons.append(
            InlineKeyboardButton(text=get_text(lang, "channel_backup_button"), url=CHANNEL_BACKUP)
        )
    buttons.append(channel_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –±–æ—Ç–∞
    buttons.append([
        InlineKeyboardButton(text=get_text(lang, "bot_button"), url=BOT_LINK)
    ])
    
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text=get_text(lang, "admin_button"), callback_data="admin_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥"
def get_back_keyboard(lang="ru"):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, "back_button"), callback_data="back_to_main")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω)
def get_admin_menu(lang="ru"):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, "stats"), callback_data="stats")],
        [InlineKeyboardButton(text=get_text(lang, "links"), callback_data="links")],
        [InlineKeyboardButton(text=get_text(lang, "broadcast"), callback_data="broadcast")],
        [InlineKeyboardButton(text=get_text(lang, "back_button"), callback_data="back_to_main")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
def get_broadcast_menu(lang="ru", broadcast_text=""):
    data = {
        "ru": "–í—Å–µ",
        "en": "All"
    }
    lang_text = data.get(lang, "All")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(lang, "broadcast_recipients", "–í—Å–µ", lang_text), callback_data="broadcast_recipients")],
        [InlineKeyboardButton(text=get_text(lang, "broadcast_start"), callback_data="broadcast_start")],
        [InlineKeyboardButton(text=get_text(lang, "back_button"), callback_data="back_to_main")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
def get_broadcast_lang_keyboard(lang="ru"):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="broadcast_lang_ru"),
            InlineKeyboardButton(text="üá¨üáß English", callback_data="broadcast_lang_en"),
            InlineKeyboardButton(text="üåç –í—Å–µ", callback_data="broadcast_lang_all")
        ],
        [InlineKeyboardButton(text=get_text(lang, "back_button"), callback_data="broadcast_back")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Å—ã–ª–æ–∫ (–∏–Ω–ª–∞–π–Ω)
def get_links_menu(lang="ru"):
    keyboard = [
        [InlineKeyboardButton(text=get_text(lang, "edit_channel"), callback_data="edit_channel")],
        [InlineKeyboardButton(text=get_text(lang, "edit_bot"), callback_data="edit_bot")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    if CHANNEL_BACKUP:
        keyboard.insert(1, [InlineKeyboardButton(text=get_text(lang, "edit_channel_backup"), callback_data="edit_channel_backup")])
    
    keyboard.append([InlineKeyboardButton(text=get_text(lang, "back_button"), callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_channel_link = State()
    waiting_for_channel_backup_link = State()
    waiting_for_bot_link = State()
    waiting_for_broadcast = State()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ("No username" if message.from_user.language_code == "en" else "–ë–µ–∑ –∏–º–µ–Ω–∏")
    date = datetime.now().strftime("%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        lang = user[0]
        keyboard = get_user_keyboard(user_id, lang)
        await message.answer(get_text(lang, "welcome"), reply_markup=keyboard)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —è–∑—ã–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute("INSERT INTO users (user_id, username, date) VALUES (?, ?, ?)", 
                      (user_id, username, date))
        conn.commit()
        await message.answer(get_text("ru", "choose_language"), reply_markup=get_language_keyboard())

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /db (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("db"))
async def send_db_handler(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with open("users.db", "rb") as f:
            db_data = f.read()
        
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (message.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        
        await message.answer_document(
            document=types.BufferedInputFile(
                db_data,
                filename="users.db"
            ),
            caption=get_text(lang, "db_sent")
        )
    else:
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (message.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        await message.answer(get_text(lang, "no_access"))

# –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(lambda call: call.data.startswith("set_language_"))
async def language_choice_handler(call: types.CallbackQuery):
    lang = call.data.split("_")[-1]  # ru –∏–ª–∏ en
    user_id = call.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (lang, user_id))
    conn.commit()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    await call.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    keyboard = get_user_keyboard(user_id, lang)
    await call.message.answer(get_text(lang, "welcome"), reply_markup=keyboard)
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω –º–µ–Ω—é"
@dp.callback_query(lambda call: call.data == "admin_menu")
async def admin_menu_handler(call: types.CallbackQuery):
    if call.from_user.id == ADMIN_ID:
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        await call.message.edit_text(get_text(lang, "admin_menu"), reply_markup=get_admin_menu(lang))
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query(lambda call: call.data == "stats")
async def stats_handler(call: types.CallbackQuery):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    
    cursor.execute("SELECT COUNT(*) FROM users")
    user_count = cursor.fetchone()[0]
    await call.message.edit_text(get_text(lang, "user_count", user_count), reply_markup=get_back_keyboard(lang))
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–°—Å—ã–ª–∫–∏"
@dp.callback_query(lambda call: call.data == "links")
async def links_handler(call: types.CallbackQuery):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    await call.message.edit_text(get_text(lang, "links_menu"), reply_markup=get_links_menu(lang))
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–†–∞—Å—Å—ã–ª–∫–∞"
@dp.callback_query(lambda call: call.data == "broadcast")
async def broadcast_handler(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        broadcast_text = data.get("broadcast_text", "")
        
        await call.message.edit_text(
            get_text(lang, "broadcast_menu", broadcast_text if broadcast_text else "–ü—É—Å—Ç–æ"),
            reply_markup=get_broadcast_menu(lang, broadcast_text)
        )
        await state.set_state(Form.waiting_for_broadcast)
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Form.waiting_for_broadcast)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        await state.update_data(broadcast_text=message.text)
        
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (message.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer(
            get_text(lang, "broadcast_menu", message.text),
            reply_markup=get_broadcast_menu(lang, message.text)
        )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏"
@dp.callback_query(lambda call: call.data == "broadcast_recipients")
async def broadcast_recipients_handler(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        selected_lang = data.get("broadcast_lang", "all")
        lang_text = {
            "ru": "–†—É—Å—Å–∫–∏–π",
            "en": "English",
            "all": "–í—Å–µ"
        }.get(selected_lang, "–í—Å–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        cursor.execute("SELECT language, COUNT(*) FROM users GROUP BY language")
        lang_counts = cursor.fetchall()
        
        total_users = sum(count for _, count in lang_counts)
        ru_count = next((count for l, count in lang_counts if l == "ru"), 0)
        en_count = next((count for l, count in lang_counts if l == "en"), 0)
        
        text = get_text(lang, "broadcast_recipients", total_users, lang_text) + "\n"
        text += f"üá∑üá∫ –†—É—Å—Å–∫–∏–π: {ru_count}\n"
        text += f"üá¨üáß English: {en_count}"
        
        await call.message.edit_text(
            text,
            reply_markup=get_broadcast_lang_keyboard(lang)
        )
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(lambda call: call.data.startswith("broadcast_lang_"))
async def broadcast_lang_handler(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        selected_lang = call.data.split("_")[-1]  # ru, en –∏–ª–∏ all
        await state.update_data(broadcast_lang=selected_lang)
        
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
        data = await state.get_data()
        broadcast_text = data.get("broadcast_text", "")
        
        await call.message.edit_text(
            get_text(lang, "broadcast_menu", broadcast_text if broadcast_text else "–ü—É—Å—Ç–æ"),
            reply_markup=get_broadcast_menu(lang, broadcast_text)
        )
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(lambda call: call.data == "broadcast_back")
async def broadcast_back_handler(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        
        data = await state.get_data()
        broadcast_text = data.get("broadcast_text", "")
        
        await call.message.edit_text(
            get_text(lang, "broadcast_menu", broadcast_text if broadcast_text else "–ü—É—Å—Ç–æ"),
            reply_markup=get_broadcast_menu(lang, broadcast_text)
        )
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
@dp.callback_query(lambda call: call.data == "broadcast_start")
async def broadcast_start_handler(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
        lang = cursor.fetchone()[0] or "ru"
        
        data = await state.get_data()
        broadcast_text = data.get("broadcast_text", "")
        broadcast_lang = data.get("broadcast_lang", "all")
        
        if not broadcast_text:
            await call.answer(get_text(lang, "broadcast_no_text"), show_alert=True)
            return
        
        await call.answer(get_text(lang, "broadcast_in_progress"))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if broadcast_lang == "all":
            cursor.execute("SELECT user_id FROM users WHERE user_id != ?", (ADMIN_ID,))
        else:
            cursor.execute("SELECT user_id FROM users WHERE language = ? AND user_id != ?", (broadcast_lang, ADMIN_ID))
        
        users = cursor.fetchall()
        success = 0
        
        for user in users:
            try:
                await bot.send_message(user[0], broadcast_text)
                success += 1
            except:
                continue
        
        await call.message.answer(get_text(lang, "broadcast_complete", success))
    else:
        await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª"
@dp.callback_query(lambda call: call.data == "edit_channel")
async def edit_channel_handler(call: types.CallbackQuery, state: FSMContext):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    await call.message.edit_text(get_text(lang, "send_channel_link"), reply_markup=get_back_keyboard(lang))
    await state.set_state(Form.waiting_for_channel_link)
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª"
@dp.callback_query(lambda call: call.data == "edit_channel_backup")
async def edit_channel_backup_handler(call: types.CallbackQuery, state: FSMContext):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    await call.message.edit_text(get_text(lang, "send_channel_backup_link"), reply_markup=get_back_keyboard(lang))
    await state.set_state(Form.waiting_for_channel_backup_link)
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"
@dp.callback_query(lambda call: call.data == "edit_bot")
async def edit_bot_handler(call: types.CallbackQuery, state: FSMContext):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    await call.message.edit_text(get_text(lang, "send_bot_link"), reply_markup=get_back_keyboard(lang))
    await state.set_state(Form.waiting_for_bot_link)
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
@dp.message(Form.waiting_for_channel_link)
async def change_channel_link(message: types.Message, state: FSMContext):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (message.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    
    if not message.text.startswith("https://t.me/"):
        await message.answer(get_text(lang, "invalid_link"))
        return
    
    global CHANNEL_LINK
    CHANNEL_LINK = message.text
    config.set("links", "channel_link", CHANNEL_LINK)
    with open("settings.ini", "w") as configfile:
        config.write(configfile)
    await message.answer(get_text(lang, "channel_link_updated"), reply_markup=get_user_keyboard(message.from_user.id, lang))
    await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª
@dp.message(Form.waiting_for_channel_backup_link)
async def change_channel_backup_link(message: types.Message, state: FSMContext):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (message.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    
    if not message.text.startswith("https://t.me/"):
        await message.answer(get_text(lang, "invalid_link"))
        return
    
    global CHANNEL_BACKUP
    CHANNEL_BACKUP = message.text
    config.set("links", "channel_backup", CHANNEL_BACKUP)
    with open("settings.ini", "w") as configfile:
        config.write(configfile)
    await message.answer(get_text(lang, "channel_backup_link_updated"), reply_markup=get_user_keyboard(message.from_user.id, lang))
    await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
@dp.message(Form.waiting_for_bot_link)
async def change_bot_link(message: types.Message, state: FSMContext):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (message.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    
    if not message.text.startswith("https://t.me/"):
        await message.answer(get_text(lang, "invalid_link"))
        return
    
    global BOT_LINK
    BOT_LINK = message.text
    config.set("links", "bot_link", BOT_LINK)
    with open("settings.ini", "w") as configfile:
        config.write(configfile)
    await message.answer(get_text(lang, "bot_link_updated"), reply_markup=get_user_keyboard(message.from_user.id, lang))
    await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda call: call.data == "back_to_main")
async def back_handler(call: types.CallbackQuery, state: FSMContext):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (call.from_user.id,))
    lang = cursor.fetchone()[0] or "ru"
    await state.clear()
    await call.message.edit_text(get_text(lang, "main_menu"), reply_markup=get_user_keyboard(call.from_user.id, lang))
    await call.answer()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@dp.message()
async def handle_other_messages(message: types.Message):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    
    if user:
        lang = user[0]
        keyboard = get_user_keyboard(message.from_user.id, lang)
        await message.answer(get_text(lang, "main_menu"), reply_markup=keyboard)
    else:
        await message.answer(get_text("ru", "choose_language"), reply_markup=get_language_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def send_daily_stats():
    while True:
        now = datetime.now(pytz.timezone('Europe/Kiev'))
        if now.time() >= time(0, 0) and now.time() <= time(0, 1):
            cursor.execute("SELECT COUNT(*) FROM users")
            user_count = cursor.fetchone()[0]
            stats_text = get_text("ru", "daily_stats", user_count)
            await bot.send_message(ADMIN_ID, stats_text)
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    asyncio.create_task(send_daily_stats())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())