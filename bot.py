import sqlite3
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7412080065:AAGFF-h8r2REqDan8YKwFkH2vU41v1tYfz8'
ADMIN_IDS = [8126533622]  # –°—é–¥–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∞–¥–º–∏–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /makeadmin

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    last_interaction DATE,
    blocked BOOLEAN DEFAULT FALSE
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS settings (
    key TEXT PRIMARY KEY,
    value TEXT
)
''')

conn.commit()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, username, first_name, last_name):
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, last_interaction)
    VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, datetime.now().date()))
    conn.commit()

def update_user_interaction(user_id):
    cursor.execute('''
    UPDATE users SET last_interaction = ?, blocked = FALSE
    WHERE user_id = ?
    ''', (datetime.now().date(), user_id))
    conn.commit()

def get_start_message():
    cursor.execute('SELECT value FROM settings WHERE key = "start_message"')
    result = cursor.fetchone()
    return result[0] if result else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

def set_start_message(text):
    cursor.execute('''
    INSERT OR REPLACE INTO settings (key, value)
    VALUES (?, ?)
    ''', ('start_message', text))
    conn.commit()

def get_user_stats():
    today = datetime.now().date()
    yesterday = today - timedelta(days=1)
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE last_interaction = ? AND blocked = FALSE', (today,))
    today_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE last_interaction = ? AND blocked = FALSE', (yesterday,))
    yesterday_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM users WHERE blocked = FALSE')
    total_count = cursor.fetchone()[0]
    
    return today_count, yesterday_count, total_count

def get_all_users():
    cursor.execute('SELECT user_id FROM users WHERE blocked = FALSE')
    return [row[0] for row in cursor.fetchall()]

def mark_user_blocked(user_id):
    cursor.execute('UPDATE users SET blocked = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()

def is_admin(user_id):
    return user_id in ADMIN_IDS

def add_admin(user_id):
    if user_id not in ADMIN_IDS:
        ADMIN_IDS.append(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    update_user_interaction(user.id)
    
    start_message = get_start_message()
    await update.message.reply_text(start_message)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data='admin_message')],
        [InlineKeyboardButton("üì• –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=reply_markup)

async def db_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        return
    
    with open('bot_database.db', 'rb') as db_file:
        await context.bot.send_document(chat_id=user.id, document=db_file)

async def makeadmin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_admin(user.id):
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin <user_id>")
        return
    
    try:
        new_admin_id = int(context.args[0])
        add_admin(new_admin_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω")
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    if not is_admin(user.id) and query.data.startswith('admin_'):
        return
    
    if query.data == 'admin_stats':
        await show_stats(query)
    elif query.data == 'admin_message':
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start:")
        context.user_data['waiting_for_message'] = True
    elif query.data == 'admin_broadcast':
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='confirm_broadcast')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_admin')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üì• –†–∞—Å—Å—ã–ª–∫–∞", reply_markup=reply_markup)
    elif query.data == 'confirm_broadcast':
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        context.user_data['waiting_for_broadcast'] = True
    elif query.data == 'back_to_admin':
        await admin_menu(query)

async def show_stats(query):
    today, yesterday, total = get_user_stats()
    keyboard = [
        [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_stats')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_admin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–æ —Å –±–æ—Ç–æ–º\n"
        f"–°–µ–≥–æ–¥–Ω—è: {today} —á–µ–ª–æ–≤–µ–∫\n"
        f"–í—á–µ—Ä–∞: {yesterday} —á–µ–ª–æ–≤–µ–∫\n"
        f"–í—Å–µ–≥–æ: {total} —á–µ–ª–æ–≤–µ–∫",
        reply_markup=reply_markup
    )

async def admin_menu(query):
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data='admin_message')],
        [InlineKeyboardButton("üì• –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    update_user_interaction(user.id)
    
    if 'waiting_for_message' in context.user_data and is_admin(user.id):
        set_start_message(update.message.text)
        context.user_data.pop('waiting_for_message')
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è /start –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await admin_command(update, context)
    elif 'waiting_for_broadcast' in context.user_data and is_admin(user.id):
        context.user_data.pop('waiting_for_broadcast')
        broadcast_message = update.message.text
        users = get_all_users()
        success = 0
        failed = 0
        
        for user_id in users:
            try:
                await context.bot.send_message(chat_id=user_id, text=broadcast_message)
                success += 1
            except:
                mark_user_blocked(user_id)
                failed += 1
        
        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")
        await admin_command(update, context)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    if update and hasattr(update, 'effective_user'):
        mark_user_blocked(update.effective_user.id)
    print(f"Error: {context.error}")

def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("db", db_command))
    application.add_handler(CommandHandler("makeadmin", makeadmin_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
